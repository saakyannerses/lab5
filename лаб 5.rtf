{\rtf1\ansi\ansicpg1251\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \uc0\u1051 \u1072 \u1073  5 \
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  1 \u1089 ++\

\f1\i\b0 \
#include <iostream>\
#include <vector>\
using namespace std;\
\
// \uc0\u1050 \u1083 \u1072 \u1089 \u1089  \u1076 \u1083 \u1103  \u1087 \u1088 \u1077 \u1076 \u1089 \u1090 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1103  \u1082 \u1091 \u1073 \u1080 \u1095 \u1077 \u1089 \u1082 \u1086 \u1075 \u1086  \u1089 \u1087 \u1083 \u1072 \u1081 \u1085 \u1072 \
class CubicSpline \{\
private:\
    vector<double> X;\
    vector<double> Y;\
    vector<double> h;\
    vector<double> a;\
    vector<double> b;\
    vector<double> c;\
    vector<double> d;\
\
public:\
    CubicSpline(const std::vector<double>& x, const std::vector<double>& y) : X(x), Y(y) \{\
        int n = x.size();\
\
        // \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1077 \u1085 \u1080 \u1077  \u1088 \u1072 \u1079 \u1085 \u1086 \u1089 \u1090 \u1077 \u1081  \u1084 \u1077 \u1078 \u1076 \u1091  \u1091 \u1079 \u1083 \u1072 \u1084 \u1080 \
        for (int i = 0; i < n - 1; ++i) \{\
            h.push_back(x[i + 1] - x[i]);\
        \}\
\
        // \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1077 \u1085 \u1080 \u1077  \u1082 \u1086 \u1101 \u1092 \u1092 \u1080 \u1094 \u1080 \u1077 \u1085 \u1090 \u1086 \u1074  \u1089 \u1087 \u1083 \u1072 \u1081 \u1085 \u1072 \
        vector<double> alpha(n, 0.0);\
        vector<double> k(n, 1.0);\
        vector<double> m(n, 0.0);\
        vector<double> z(n, 0.0);\
\
        for (int i = 1; i < n - 1; ++i) \{\
            alpha[i] = 3.0 / h[i] * (y[i + 1] - y[i]) - 3.0 / h[i - 1] * (y[i] - y[i - 1]);\
        \}\
\
        k[0] = 1.0;\
        m[0] = 0.0;\
        z[0] = 0.0;\
\
        for (int i = 1; i < n - 1; ++i) \{\
            k[i] = 2.0 * (x[i + 1] - x[i - 1]) - h[i - 1] * m[i - 1];\
            m[i] = h[i] / k[i];\
            z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / k[i];\
        \}\
\
        k[n - 1] = 1.0;\
        z[n - 1] = 0.0;\
        c.resize(n, 0.0);\
        b.resize(n, 0.0);\
        d.resize(n, 0.0);\
\
        for (int j = n - 2; j >= 0; --j) \{\
            c[j] = z[j] - m[j] * c[j + 1];\
            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2.0 * c[j]) / 3.0;\
            d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]);\
        \}\
    \}\
\
    // \uc0\u1060 \u1091 \u1085 \u1082 \u1094 \u1080 \u1103  \u1076 \u1083 \u1103  \u1074 \u1099 \u1095 \u1080 \u1089 \u1083 \u1077 \u1085 \u1080 \u1103  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103  \u1089 \u1087 \u1083 \u1072 \u1081 \u1085 \u1072  \u1074  \u1090 \u1086 \u1095 \u1082 \u1077  x*\
    double interpolate(double x_star) \{\
        int n = X.size();\
        int idx = 0;\
\
        // \uc0\u1053 \u1072 \u1093 \u1086 \u1076 \u1080 \u1084  \u1086 \u1090 \u1088 \u1077 \u1079 \u1086 \u1082  \u1080 \u1085 \u1090 \u1077 \u1088 \u1087 \u1086 \u1083 \u1103 \u1094 \u1080 \u1080 \
        for (int i = n - 2; i >= 0; --i) \{\
            if (x_star >= X[i]) \{\
                idx = i;\
                break;\
            \}\
        \}\
\
        double dx = x_star - X[idx];\
        return Y[idx] + b[idx]*dx + c[idx]*dx*dx + d[idx]*dx*dx*dx;\
    \}\
\};\
\
int main() \{\
    vector<double> X = \{0.0, 1.0, 2.0, 3.0, 4.0\};\
    vector<double> Y = \{0.0, 0.5, 0.86603, 1.0, 0.86603\};\
\
    CubicSpline spline(X, Y);\
\
    double x_star = 1.5;\
    double interpolatedValue = spline.interpolate(x_star);\
    cout << "\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080  \u1074  \u1090 \u1086 \u1095 \u1082 \u1077  " << x_star << " \u1088 \u1072 \u1074 \u1085 \u1086  " << interpolatedValue << endl;\
\
    return 0;\
\}\

\f0\i0\b \
\
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  2 \u1087 \u1080 \u1090 \u1086 \u1085 
\f2\b0 \
\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 import numpy as np\
\
x = np.array([0.1 * np.pi, 0.2 * np.pi, 0.3 * np.pi, 0.4 * np.pi])\
y = np.sin(x)\
\
x_star = 0.25 * np.pi\
\
#\uc0\u1084 \u1085 \u1086 \u1075 \u1086 \u1095 \u1083 \u1077 \u1085 \u1099  \u1080 \u1085 \u1090 \u1077 \u1088 \u1087 \u1086 \u1083 \u1103 \u1094 \u1080 \u1080  \u1051 \u1072 \u1075 \u1088 \u1072 \u1085 \u1078 \u1072 \
n = len(x)\
P = np.zeros((n, n))\
for i in range(n):\
    for j in range(n):\
        if i != j:\
            P[i, j] = y[j] / (x[i] - x[j])\
\
#\uc0\u1080 \u1085 \u1090 \u1077 \u1088 \u1087 \u1086 \u1083 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1085 \u1086 \u1077  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077 \
y_star = 0\
for i in range(n):\
    y_star += P[i, :] * (x_star - x[i])\
\
\
delta_y = np.abs(y_star - np.sin(x_star))\
\
print("\uc0\u1048 \u1085 \u1090 \u1077 \u1088 \u1087 \u1086 \u1083 \u1103 \u1094 \u1080 \u1086 \u1085 \u1085 \u1099 \u1077  \u1084 \u1085 \u1086 \u1075 \u1086 \u1095 \u1083 \u1077 \u1085 \u1099  \u1051 \u1072 \u1075 \u1088 \u1072 \u1085 \u1078 \u1072 :", P)\
print("\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1087 \u1086 \u1075 \u1088 \u1077 \u1096 \u1085 \u1086 \u1089 \u1090 \u1080  \u1080 \u1085 \u1090 \u1077 \u1088 \u1087 \u1086 \u1083 \u1103 \u1094 \u1080 \u1080  \u1074  \u1090 \u1086 \u1095 \u1082 \u1077  x* =", x_star, ":", delta_y)}